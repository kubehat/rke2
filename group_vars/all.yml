---
#--------------------------------------------#
#                 Global Config              #
#--------------------------------------------#
# Download artifacts
download_artifacts: false

# Env Name
env_name: "local"

# Cluster Name
cluster_name: "orion"

# Cluster FQDN endpoint (for rke2 Cluster Domain SAN)
cluster_domain: "kube.zme.k7s"

# Target Env
target_env: "{{ lookup('env', 'TARGET_ENV') | default('local', true) }}"

#--------------------------------------------#
#                   Kubeconfig               #
#--------------------------------------------#
# Exported KUBECONFIG in local server
kubeconfig_path: "/tmp/kubeconfig/{{ target_env }}"

#--------------------------------------------#
#              Registry-Artifacts            #
#--------------------------------------------#
# Artifactory URL
registry_artifacts_url: "{{ lookup('env', 'REGISTRY_JFROG_GENERIC_URL') | default('jfrog.example.com', true) }}"

# Auth for Downloading RKE2 artifacts from local artifactory (ex. jfrog)
artifactory_auth: false
registry_artifacts_username: "{{ lookup('env', 'REGISTRY_JFROG_GENERIC_USERNAME') }}"
registry_artifacts_password: "{{ lookup('env', 'REGISTRY_JFROG_GENERIC_PASSWORD') }}"

#--------------------------------------------#
#               Registry-Docker              #
#--------------------------------------------#
# Path to RKE2 private registry config file template
rke2_registry_config: "registries.yaml.j2"
config_private_registry: false

#Containerd can be configured to connect to private registries and use them to pull images as needed by the kubelet.
# Docker Registry info
registry_docker1: "docker.jfrog.example.com"
registry_docker2: "docker.jfrog.example.com"
registry_docker_insecure: false

# RKE2 Mirrors config
# First element of Mirrors registries will be used
mirrors:
  docker.io:
    endpoint:
      - "{{ (registries | dict2items)[0].value.url }}"
      - "{{ (registries | dict2items)[1].value.url }}"
  quay.io:
    endpoint:
      - "{{ (registries | dict2items)[0].value.url }}"
      - "{{ (registries | dict2items)[1].value.url }}"
  ghcr.io:
    endpoint:
      - "{{ (registries | dict2items)[0].value.url }}"
      - "{{ (registries | dict2items)[1].value.url }}"
  registry.k8s.io:
    endpoint:
      - "{{ (registries | dict2items)[0].value.url }}"
      - "{{ (registries | dict2items)[1].value.url }}"
  registry.gitlab.com:
    endpoint:
      - "{{ (registries | dict2items)[0].value.url }}"
      - "{{ (registries | dict2items)[1].value.url }}"

# RKE2 Registries credentials
registries:
  reg1:
    url: "{{ lookup('env', 'REGISTRY_1_URL') | default(registry_docker1, true) }}"
    username: "{{ lookup('env', 'REGISTRY_USER') }}"
    password: "{{ lookup('env', 'REGISTRY_PASSWORD') }}"
    insecure: "{{ registry_docker_insecure }}"
  reg2:
    url: "{{ lookup('env', 'REGISTRY_2_URL') | default(registry_docker2, true) }}"
    username: "{{ lookup('env', 'REGISTRY_USER2') }}"
    password: "{{ lookup('env', 'REGISTRY_PASSWORD2') }}"
    insecure: "{{ registry_docker_insecure }}"

#--------------------------------------------#
#                    RKE2                    #
#--------------------------------------------#
# RKE2 version
k8s_version: "1.34.1"
rke2_release: "rke2r1"
rke2_version: "v{{ k8s_version }}+{{ rke2_release }}"

# Architecture to be downloaded, currently there are releases for amd64 and s390x
rke2_architecture: "amd64"

# URL to RKE2 install bash script
rke2_install_bash_url: "https://get.rke2.io"

# Path to RKE2 config file template
rke2_config: "config.yaml.j2"

# Default Ansible Inventory Group name for RKE2 Servers
rke2_servers_group_name: "masters"

# Default Ansible Inventory Group name for RKE2 cluster
rke2_cluster_group_name: "k8s_cluster"

# RKE2 installation method (do not change this option)
rke2_method: "tar"
rke2_channel: "latest"
rke2_service_name: "rke2-{{ rke2_type }}.service"
rke2_restart_needed: false

# Server nodes taints
rke2_server_node_taints:
  - "CriticalAddonsOnly=true:NoExecute"
# Worker nodes taints
rke2_agent_node_taints: []

# RKE2 Config path
rke_config_path: "/etc/rancher/rke2"

# RKE2 Auto-Deploying Manifest > https://docs.rke2.io/advanced#auto-deploying-manifests
rke_manifest_path: "/var/lib/rancher/rke2/server/manifests"

# Destination directory for RKE2 installation script
rke2_artifact_path: "/opt/rke2/artifact/{{ rke2_version | regex_replace('\\+', '_') }}"

# Local path to store artifacts
local_rke2_artifact_path: "{{ playbook_dir }}/artifacts/rke2/{{ rke2_version | regex_replace('\\+', '_') }}"

# Local path to store artifacts
local_rke2_selinux_path: "{{ playbook_dir }}/artifacts/selinux"

# Changes the deploy strategy to install based on local artifacts
rke2_airgap_mode: true

# Default URL to fetch artifacts
rke2_artifact_url: "https://github.com/rancher/rke2/releases/download/{{ rke2_version }}"

# Airgap required artifacts
rke2_artifact:
  - sha256sum-{{ rke2_architecture }}.txt
  - rke2.linux-{{ rke2_architecture }}.tar.gz
  - rke2-images.linux-{{ rke2_architecture }}.tar.zst
  - rke2-images-core.linux-{{ rke2_architecture }}.tar.zst

#--------------------------------------------#
#                  RKE2 Config               #
#--------------------------------------------#
# RKE config file variable for server and agent
# server config Doc https://docs.rke2.io/reference/server_config
# agent config Doc https://docs.rke2.io/reference/linux_agent_config

# Enable dual stack IPv4
ipv4_only: false
# IPv4/IPv6 CIDR
ipv4_cluster_cidr: "10.42.0.0/16"
ipv4_service_cidr: "10.43.0.0/16"
ipv4_cluster_dns: "10.43.0.10"
ipv4_rke2_node_ip: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
ipv4_rke2_node_external_ip: "{{ hostvars[inventory_hostname]['ipv4_external_ip'] }}"

# Enable dual stack IPv4/IPv6
dual_stack: false
# IPv4/IPv6 CIDR
dual_stack_cluster_cidr: "fd00:10:42::/56,10.42.0.0/16"
dual_stack_service_cidr: "fd00:10:43::/112,10.43.0.0/16"
dual_stack_cluster_dns: "fd00:10:43::9,10.43.0.10"
dual_stack_rke2_node_ip: "{{ hostvars[inventory_hostname]['ansible_host_ipv6'] }},{{ hostvars[inventory_hostname]['ansible_host'] }}"
dual_stack_rke2_node_external_ip: "{{ hostvars[inventory_hostname]['ipv6_external_ip'] }},{{ hostvars[inventory_hostname]['ipv4_external_ip'] }}"

# Enable single stack IPv6
ipv6_only: true
# IPv6 CIDR
ipv6_cluster_cidr: "fd00:10:42::/56"
ipv6_service_cidr: "fd00:10:43::/112"
ipv6_cluster_dns: "fd00:10:43::9"
ipv6_rke2_node_ip: "{{ hostvars[inventory_hostname]['ansible_host_ipv6'] }}"
ipv6_rke2_node_external_ip: "{{ hostvars[inventory_hostname]['ipv6_external_ip'] }}"

# The default Address is the first IPv4/Ipv6 of the Server/Master node,
# This address is exclusively used by other servers to join the main server's control plane.
# It serves as the designated address for joining the cluster.
rke2_api_ip: "{{ hostvars[groups[rke2_servers_group_name][0]]['ansible_host'] }}"

# Pre-shared secret token that other server or agent nodes will register with when connecting to the cluster
rke2_server_token: "41a21b59f2aa1c5430969559a425d"

# data directory for RKE2
rke2_data_path: "/var/lib/rancher/rke2"

# Deploy RKE2 with default CNI canal
cluster_cni: none

# The value for the node-name configuration item
rke2_node_name: "{{ inventory_hostname }}"

# Option to disable kube-proxy
disable_kube_proxy: true

# Disable additional components
disable_components: true
components_to_disable:
  - rke2-ingress-nginx
  # - rke2-metrics-server

# Enable debug mode (rke2-service)
rke2_debug: false

# (Optional) List of Node labels
k8s_worker_node_label:
  - "node.kubernetes.io/worker=true"

# (Optional) List of Node labels
k8s_cp_node_label: []

# Override default containerd snapshotter
rke2_snapshooter: overlayfs

# Resolver DNS
resolv_conf: /etc/resolv.conf

# Option to disable cloud-controller-Manager
disable_cloud_controller: true

# Expose kube scheduler
expose_kube_scheduler: true
# Expose kube controller
expose_kube_controller: true
# Enable Metrics Exposition
expose_etcd_metrics: true

#--------------------------------------------#
#              RKE2 - Selinux                #
#--------------------------------------------#
# Enable SELinux for rke2
rke2_selinux: true

# Default URL to fetch Selinux artifacts RPM
rke2_artifact_selinux_url: "https://github.com/rancher/rke2-selinux/releases/download/v0.21.stable.1/rke2-selinux-0.21-1.el9.noarch.rpm"
rke2_artifact_selinux_gpg_key_url: "https://rpm.rancher.io/public.key"
rke2_artifact_selinux_gpg_key_file: "public.key"

#--------------------------------------------#
#             RedHat - Selinux               #
#--------------------------------------------#
# This will install only Generic Container Selinux RPM
container_selinux: false  #if set to false, RKE2 will install automatically an ambeded version for Redhat

# Redhat container selinux artifacts RPM (redhat 9) https://pkgs.org/search/?q=container-selinux
container_selinux_artifact_url: "https://mirror.stream.centos.org/9-stream"
container_selinux_artifact:
  - "{{ container_selinux_artifact_url }}/AppStream/x86_64/os/Packages/container-selinux-2.237.0-1.el9.noarch.rpm"
  - "{{ container_selinux_artifact_url }}/BaseOS/x86_64/os/Packages/policycoreutils-3.6-3.el9.x86_64.rpm"
  - "{{ container_selinux_artifact_url }}/BaseOS/x86_64/os/Packages/selinux-policy-38.1.58-1.el9.noarch.rpm"
  - "{{ container_selinux_artifact_url }}/BaseOS/x86_64/os/Packages/selinux-policy-targeted-38.1.58-1.el9.noarch.rpm"
  - "{{ container_selinux_artifact_url }}/BaseOS/x86_64/os/Packages/selinux-policy-mls-38.1.58-1.el9.noarch.rpm"
  - "{{ container_selinux_artifact_url }}/AppStream/x86_64/os/Packages/python3-policycoreutils-3.6-3.el9.noarch.rpm"
  - "{{ container_selinux_artifact_url }}/AppStream/x86_64/os/Packages/policycoreutils-python-utils-3.6-3.el9.noarch.rpm"
  - "{{ container_selinux_artifact_url }}/BaseOS/x86_64/os/Packages/policycoreutils-newrole-3.6-3.el9.x86_64.rpm"
centos_gpg_key_url: "https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official"

#--------------------------------------------#
#                    Crictl                  #
#--------------------------------------------#
crictl_debug: false
crictl_image_endpoint: "unix:///var/run/k3s/containerd/containerd.sock"
crictl_runtime_endpoint: "unix:///var/run/k3s/containerd/containerd.sock"
crictl_timeout: "10"
# Path to crictl config file template
crictl_config: "crictl.yaml.j2"
# crictl Config path on server
crictl_config_path: "/etc"

#--------------------------------------------#
#          root CA (for Cert Manager)        #
#--------------------------------------------#
# root CA key
root_ca_key: "{{ lookup('env', 'ROOT_CA_KEY') }}"
# root CA certificate
root_ca_crt: "{{ lookup('env', 'ROOT_CA_CRT') }}"
# Path to root CA config file template
root_ca_manifest: "root-ca.yaml.j2"
# Manifest creation enabler
root_ca_config: true

#--------------------------------------------#
#                RKE2-Kubevip                #
#--------------------------------------------#
# Kube-vip enabler
kube_vip: false
# Kube-vip Address
kube_vip_ip: "10.13.13.16"

# Kube-vip arp
kube_vip_arp_enabled: true
# Kube-vip interface (real admin interface)
kube_vip_arp_interface: "eth0"

# Kube-vip interface (lo for BGP - do not change to a real interface like *)
kube_vip_bgp_interface: "lo"
# Kube-vip bgp
kube_vip_bgp_enabled: false
# Kube-vip bgp local AS (node AS)
kube_vip_bgp_local_as: "64521"
# Kube-vip bgp peer AS (Firewall AS)
kube_vip_bgp_peer_as: "64520"
# Peer IP
kube_vip_bgp_peer_address: "10.13.13.1"

# Kube-vip image
kube_vip_image: "ghcr.io/kube-vip/kube-vip:v0.9.2"

#--------------------------------------------#
#                     lvm                    #
#--------------------------------------------#
lvm_workers_only: true
#LVM Apply
lvm_apply: true
lvm_rpm_offline: false

# VG Config
device_id: "/dev/sda"
disk_vgname: "csi_storage"
lvm_groups:
      - vgname: "{{ disk_vgname }}"
        disks: "{{ device_id }}"
        create: true
        lvnames:
          - lvname: "kubernetes"
            size: "25g"
            create: true
            filesystem: "xfs"
            mount: true
            mount_point: "/mnt/kubernetes"
            mount_options: 'defaults,noatime'

# RPM to Install
packages_list:
  - lvm2-2.03.23-2.el9.tar.gz
  - iscsi-initiator-utils-6.2.1.9-1.gita65a472.el9.tar.gz

# RPM Services to enable and start
packages_services:
  - iscsid
  - iscsiuio
